name: Clipper Worker

on:
  schedule:
    - cron: "*/10 * * * *"
  workflow_dispatch:
    inputs:
      stream_url:
        description: "Paste a public VOD/stream URL (YouTube/Twitch/Kick)"
        required: true
      max_clips:
        description: "Max 60s clips to produce (default 4-6 is good for CPU)"
        required: false
        default: "4"

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 55

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install Python deps
        working-directory: worker
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Validate required input when manually dispatched
      - name: Validate inputs (manual runs)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          if [ -z "${{ github.event.inputs.stream_url }}" ]; then
            echo "ERROR: stream_url input is required for workflow_dispatch runs." >&2
            exit 1
          fi

      # Manual (single-URL) mode
      - name: Run worker (manual single-URL)
        if: ${{ github.event_name == 'workflow_dispatch' }}
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          STREAM_URL: ${{ github.event.inputs.stream_url }}
          MAX_CLIPS: ${{ github.event.inputs.max_clips }}
        working-directory: worker
        run: python main.py

      # Scheduled (queue) mode â€” adjust the command/flag to match your script
      - name: Run worker (scheduled queue)
        if: ${{ github.event_name == 'schedule' }}
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        working-directory: worker
        run: |
          # If your script supports a queue/polling mode, call it here:
          # python main.py --queue
          # Otherwise, exit cleanly to avoid red Xs until queue mode is built:
          echo "Scheduled run: no queue mode implemented yet. Exiting 0."
